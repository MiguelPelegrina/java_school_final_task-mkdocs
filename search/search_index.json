{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#1-code","title":"1. Code","text":"<p>The code of the project is split into several repositories to facilitate deployment and testing, improve the maintainability and implement the separation of concerns. You can find the repositories following these links:</p> <ul> <li>Java Spring Boot application</li> <li>Angular application</li> <li>Kubernetes minikube configuration</li> <li>Documentation</li> </ul>"},{"location":"#21-overview","title":"2.1. Overview","text":"<p>The Online Bookstore is a web-based platform designed to provide both users and employees with a seamless and enjoyable experience related to the usage of an e-commerce. This technical specification document outlines the functional and non-functional requirements, system architecture, and key features of the application.</p>"},{"location":"#22-purpose-of-the-document","title":"2.2. Purpose of the document","text":"<p>The primary purpose of this document is to serve as a comprehensive guide of the application. It defines the scope and objectives of the project, ensuring a shared understanding of the requirements and expectations.</p>"},{"location":"#23-objectives","title":"2.3. Objectives","text":"<p>The key objectives of this project are to:</p> <ul> <li>Create an intuitive and user-friendly interface that allows customers to easily purchase books and employees to manage an e-commerce.</li> <li>Implement a stable and secure API using best practices.</li> <li>Ensure the scalability and maintainability of the application for future enhancements.</li> <li>To learn how to use the great variety of available tools for software development.</li> </ul>"},{"location":"#3-glossary","title":"3. Glossary","text":"Abbreviation Meaning API Application Programming Interface CRUD Create, Read, Update, Delete CSS Cascading Style Sheets GUI Graphical User Interface HTML Hypertext Markup Language HTTP Hypertext Transfer Protocol ID Identification ISBN International Standard Book Number JSON JavaScript Object Notation JWT JSON Web Token ORM Object-Relational Mapping REST Representational State Transfer SQL Structured Query Language URL Uniform Resource Locator"},{"location":"database/","title":"Database Design","text":""},{"location":"database/#entities","title":"Entities","text":"<p>There are multiple entities used in this project, but the most important ones are Users, Orders, and Products. They relate to each other in the following way:</p> <ul> <li>A User can have many Orders.</li> <li>A Order can have many Products.</li> </ul> <p>In the following table, all fields of these entities are shown:</p> Users Orders Products id id id Name User id Title Surname Payment method Price Date of birth Delivery method Genre Email Order status Parameters id Password Payment status Stock Active Date Image Phone Active Address id"},{"location":"database/#schema","title":"Schema","text":"<p>The whole schema of the database is shown in the following screenshot.</p> <p></p>"},{"location":"requirements/","title":"Requirements","text":"<p>This web application was developed as my final project for the Java School of T-Systems Iberia. You can find the specific task here. After analysing the task I established the following requirements.</p>"},{"location":"requirements/#functional-requirements","title":"Functional Requirements","text":""},{"location":"requirements/#1-user-authentication-and-authorization","title":"1. User Authentication and Authorization:","text":"<ul> <li>Users should be able to register for an account with a valid email address and password.</li> <li>Registered users should be able to log in securely.</li> <li>User roles should include customers, employees and administrators with different levels of access.</li> </ul>"},{"location":"requirements/#2-book-browsing-and-searching","title":"2. Book Browsing and Searching:","text":"<ul> <li>Users should be able to browse books by parameters like title, author, and genre.</li> <li>Each book listing should include essential details such as cover image, title, author and price.</li> <li>Employees can add new books and update existing ones.</li> <li>Employees can create and manage categories.</li> </ul>"},{"location":"requirements/#3-shopping-cart","title":"3. Shopping Cart:","text":"<ul> <li>Users should be able to add books to their shopping cart.</li> <li>The shopping cart should display the total price and allow users to update or remove items.</li> <li>The cart is displayed for both the guest and the logged in user. Moreover, after authorization, the contents of the basket are not lost. After closing the page, the basket is not cleared.</li> </ul>"},{"location":"requirements/#4-checkout-process","title":"4. Checkout Process:","text":"<ul> <li>The system should confirm the order and provide an order summary.</li> <li>During checkout, users should provide shipping information and select a payment method.</li> <li>Users should be guided through a secure checkout process.</li> </ul>"},{"location":"requirements/#5-order-history","title":"5. Order History:","text":"<ul> <li>Users should have access to their order history, displaying past purchases and order details.</li> <li>Employees can change the order and payment statuses.</li> </ul>"},{"location":"requirements/#6-user-account-management","title":"6. User Account Management:","text":"<ul> <li>Users should be able to update their profile information, including personal data, shipping address and password.</li> </ul>"},{"location":"requirements/#7-sales-statistics","title":"7. Sales statistics","text":"<ul> <li>Employees can the most sold products, all customers and the generated revenue of the current monkth/week, last month/week and last 7/30 days.</li> </ul>"},{"location":"requirements/#non-functional-requirements","title":"Non-functional Requirements","text":""},{"location":"requirements/#1-performance","title":"1. Performance:","text":""},{"location":"requirements/#11-response-time","title":"1.1. Response Time:","text":"<ul> <li>The system should respond to user interactions within 2 seconds for book browsing and search operations.</li> <li>The checkout process should complete within 5 seconds.</li> </ul>"},{"location":"requirements/#12-scalability","title":"1.2. Scalability:","text":"<ul> <li>The application should handle a minimum of 10,000 concurrent users without a significant decrease in performance.</li> </ul>"},{"location":"requirements/#2-security","title":"2. Security:","text":""},{"location":"requirements/#21-user-data","title":"2.1. User Data:","text":"<ul> <li>User passwords should be securely encrypted and stored.</li> <li>All communication between the client and server should use HTTPS.</li> </ul>"},{"location":"requirements/#22-authorization","title":"2.2. Authorization:","text":"<ul> <li>Access to user data and sensitive operations should be restricted based on user roles.</li> </ul>"},{"location":"requirements/#23-data-backup","title":"2.3. Data Backup:","text":"<ul> <li>Regular backups of user and transaction data should be performed, with a recovery plan in place.</li> </ul>"},{"location":"requirements/#3-reliability","title":"3. Reliability:","text":""},{"location":"requirements/#31-availability","title":"3.1. Availability:","text":"<ul> <li>The application should have 99.9% uptime, excluding scheduled maintenance.</li> </ul>"},{"location":"requirements/#32-error-handling","title":"3.2. Error Handling:","text":"<ul> <li>Meaningful error messages should be provided to users in case of failures.</li> <li>Errors should be logged for review and troubleshooting.</li> </ul>"},{"location":"requirements/#4-usability","title":"4. Usability:","text":"<ul> <li> <p>The user interface should be intuitive, with clear navigation and user-friendly interactions.</p> </li> <li> <p>The application should comply with accessibility standards (e.g., WCAG) to ensure usability for users with disabilities.</p> </li> </ul>"},{"location":"requirements/#5-compatibility","title":"5. Compatibility:","text":"<ul> <li> <p>The application should be compatible with the latest versions of major web browsers (Chrome, Firefox, Safari, Edge).</p> </li> <li> <p>The user interface should be responsive and functional on various devices, including smartphones and tablets.</p> </li> </ul>"},{"location":"requirements/#6-maintainability","title":"6. Maintainability:","text":"<ul> <li> <p>Code should follow best practices and be well-documented to facilitate future updates and maintenance.</p> </li> <li> <p>The system should be designed with modular components to allow for easier updates and enhancements.</p> </li> </ul>"},{"location":"requirements/#7-testing","title":"7. Testing:","text":"<ul> <li> <p>Automated tests should cover critical functionalities, including user authentication, order transactions and profile changes.</p> </li> <li> <p>Performance testing should be conducted regularly to identify and address bottlenecks.</p> </li> </ul>"},{"location":"requirements/#8-deployment","title":"8. Deployment:","text":"<ul> <li> <p>The system should support frequent and reliable deployments, preferably using a continuous integration/continuous deployment (CI/CD) pipeline.</p> </li> <li> <p>A rollback plan should be in place to quickly revert to a stable version in case of deployment issues.</p> </li> </ul>"},{"location":"system_architecture/","title":"System Architecture","text":""},{"location":"system_architecture/#1-high-level-architecture","title":"1. High-Level Architecture","text":"<p>The online bookstore application follows a typical three-tier architecture, consisting of a presentation layer, business logic layer, and data storage layer.</p>"},{"location":"system_architecture/#11-frontend-presentation-layer","title":"1.1. Frontend (Presentation Layer)","text":"<ul> <li>Developed using Angular, a robust front-end framework for building dynamic and responsive user interfaces.</li> <li>Utilizes TypeScript for enhanced static typing and object-oriented programming support that enhances the development process.</li> <li>Responsive and dynamic user interface for seamless user interactions through HTML and CSS, two standard web technologies for structuring and styling web pages.</li> <li>The UI components are part of the Angular Material library.</li> </ul>"},{"location":"system_architecture/#12-backend-business-logic-layer","title":"1.2. Backend (Business Logic Layer)","text":"<ul> <li>Implemented using Spring Boot with Java, providing a scalable and modular backend architecture.</li> <li>Utilizes Java, a widely-used programming language for building scalable and maintainable backend applications.</li> <li>Spring Security provides robust authentication and authorization mechanisms.</li> <li>JPA and Hibernate work together to handle data persistence tasks.</li> <li>QueryDSL simplifies writing database queries.</li> <li>JUnit and Mockito were used to write unit tests.</li> </ul>"},{"location":"system_architecture/#13-database-data-storage-layer","title":"1.3. Database (Data Storage Layer)","text":"<ul> <li>PostgreSQL, an open-source relational database system known for its reliability and extensibility, is chosen as the relational database management system (RDBMS).</li> </ul>"},{"location":"system_architecture/#2-communication-protocols","title":"2. Communication Protocols","text":"<ul> <li>RESTful APIs serve as the architectural backbone, providing a standardized and resource-oriented communication channel between the frontend and backend. This paradigm embraces stateless interactions, allowing the frontend to initiate requests and receive responses, creating a coherent and predictable model for information exchange.</li> </ul>"},{"location":"system_architecture/#3-deployment","title":"3. Deployment","text":"<p>A robust deployment strategy is essential for ensuring agility, reliability, and scalability. To achieve this, the system leverages a comprehensive deployment approach, including:</p> <ul> <li>Docker containers for packaging and deployment to ensure consistency across environments. This ensures seamless deployment across diverse environments, promoting compatibility and reliability.</li> <li>Kubernetes orchestrates and manages the deployment, scaling, and operation of application containers. This container orchestration platform introduces an additional layer of automation, facilitating efficient resource utilization, load balancing, and fault tolerance.</li> <li>Continuous Integration/Continuous Deployment (CI/CD) pipeline via GitHub Actions and Kubernetes for automated testing and deployment. This not only expedites the delivery of new features and updates but also guarantees the stability of the application through rigorous testing.</li> </ul>"},{"location":"system_architecture/#4-version-control","title":"4. Version Control","text":"<p>Version control is the backbone of collaborative software development, ensuring order, traceability, and collaboration among developers. The Online Bookstore Application relies on GitHub as its central repository hosting service.</p>"},{"location":"system_architecture/#5-development-environment","title":"5. Development Environment","text":"<p>Developers, as architects of the application's codebase, utilize specialized integrated development environments tailored to the technologies employed:</p> <ul> <li>Feature-Rich Java Development with IntelliJ IDEA, offering an array of features such as intelligent code completion, advanced debugging tools, and a rich ecosystem of plugins. This robust IDE streamlines the development of the server-side components, ensuring code quality and developer productivity.</li> <li>Versatile Web Development: Visual Studio Code emerges as the tool of choice for Angular and TypeScript development. Its lightweight yet powerful features, including integrated Git control and debugging support</li> <li>PgAdmin 4 serves as the graphical user interface for managing PostgreSQL databases. It enables developers to interact with the database, perform queries, and visualize the database structure. This user-friendly tool enhances the efficiency of database-related tasks, promoting effective collaboration between developers and the database management system.</li> </ul>"},{"location":"system_architecture/#6-documentation","title":"6. Documentation","text":"<p>Documentation serves as the compass that guides developers, stakeholders, and other contributors through development. It encompasses two essential facets: the overarching technical specification document and the detailed API documentation. Both are online and hosted on GitHub.</p>"},{"location":"system_architecture/#61-technical-specification-document","title":"6.1. Technical Specification Document","text":"<ul> <li>MkDocs is the chosen tool for the creation and upkeep of this technical specification document. Its simplicity and versatility empower developers to structure and organize documentation in a coherent manner.</li> </ul>"},{"location":"system_architecture/#62-api-documentation","title":"6.2. API documentation","text":"<p>Javadoc and OpenAPI are used in conjuction to generate an extensive documentation.</p>"},{"location":"system_architecture/#621-javadoc","title":"6.2.1. Javadoc","text":"<ul> <li>Javadoc is employed to automatically generate API documentation by extracting information from inline comments within the Java source code. This approach ensures that the API documentation remains closely tied to the source code, minimizing the risk of documentation becoming outdated.</li> <li>It also generates HTML documentation, making it easily accessible through a designated URL. This user-friendly format allows developers to navigate and comprehend the API specifications effortlessly, fostering a deeper understanding of the codebase.</li> </ul>"},{"location":"system_architecture/#622-openapi","title":"6.2.2. OpenAPI","text":"<ul> <li>OpenAPIs declarative nature allows for the concise and clear representation of the API structure, endpoints, request-response formats, and authentication mechanisms.</li> <li>The integration of OpenAPI provides an interactive API exploration experience, allowing developers and stakeholders to interact with the API documentation dynamically. This functionality enhances understanding and facilitates smoother integration of frontend and backend components.</li> </ul>"},{"location":"system_architecture/#7-code-quality-analysis","title":"7. Code Quality Analysis","text":"<p>Ensuring the integrity and quality of the codebase is important, therefore SonarQube is being used to ensure that the code quality holds up to certain standards.</p> <ul> <li>SonarQube, formerly known as Sonar, is seamlessly integrated into the development pipeline, actively scrutinizing the codebase for various dimensions of quality.</li> <li>Code analysis covers aspects such as code smells, bugs, security vulnerabilities, and code duplications.</li> </ul> <p></p> <p>The following patterns were excluded, following the suggestions from the SonarQube Documentation, which includes mainly generated code by the Lombok library:</p> <ul> <li>Folder</li> <li>Security</li> <li>Files</li> <li>DTO</li> <li>Entity</li> </ul> <p>This system architecture leverages modern and widely-used technologies to ensure a scalable, maintainable, and secure web application. It encourages separation of concerns and ease of development. Continuous integration, deployment automation, and containerization contribute to a streamlined development and deployment process.</p>"},{"location":"system_architecture/#future-development","title":"Future development","text":"<p>Looking ahead, in the future I would like to add the following improvements to the code:</p> <ul> <li>Testing the frontend with tools like Nightwatch.</li> <li>Using cloud services.</li> </ul>"}]}